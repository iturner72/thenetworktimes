[package]
name = "nwtr"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = "1.0"
axum = { version = "0.7", optional = true, features = ["macros"] }
bytes = "1.6.0"
cfg-if = "1.0.0"
chrono = { version = "0.4", optional = false, features = ["serde"] }
console_error_panic_hook = "0.1"
console_log = "1"
deadpool-diesel = { version = "0.6.1", optional = true, features = ["postgres", "rt_tokio_1"] }
diesel = { version = "2.0.0", optional = true, features = ["postgres", "chrono", "r2d2", "serde_json"] }
dotenv = { version = "0.15.0", optional = false }
env_logger = { version = "0.9", optional = false }
eventsource-stream = { version = "0.2.3", optional = true }
futures = { version = "0.3.30", optional = true }
futures-util = { version = "0.3.30", optional = true }
gloo-net = "0.2"
http-body = "1.0.0"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
log = { version = "0.4", optional = false }
pin-project = "1.1.5"
regex = "1.10.4"
reqwest = { version = "0.11", features = ["json", "stream"] }
serde = { version = "1.0.197", optional = false, features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
uuid = { version = "1.8.0", features = ["v4"] }
wasm-bindgen = "=0.2.92"
web-sys = { version = "0.3.69", optional = false }
thiserror = "1"
tracing = { version = "0.1", optional = true }
http = "1"

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
    "dep:axum",
    "dep:deadpool-diesel",
    "dep:diesel",
    "dep:eventsource-stream",
    "dep:futures",
    "dep:futures-util",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:tracing",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "deadpool-diesel", "diesel", "eventsource-stream", "futures", "futures-util", "tokio", "tower", "tower-http", "leptos_axum"]
skip_feature_sets = [["ssr", "hydrate"]]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "nwtr"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"


# Tailwind
tailwind-input-file = "style/tailwind.css"
tailwind-config-file = "tailwind.config.js"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
